let isCampaignLaunching = false;
var groupContactsMap = {};
var fieldOrder = [];  
let count = 0;
const phoneNumbers = [];
document.addEventListener("DOMContentLoaded", function () {
    Office.onReady(function (info) {
        if (info.host === Office.HostType.Excel) {
          
            AddMobileNumberColumn();
            setupEventListeners();
            fetchData().then(() => {
                const backNavigation = localStorage.getItem('backNavigation');
                if (backNavigation === 'true') {
                    localStorage.removeItem('backNavigation');
                    updateMessageCounter();
                    restoreFormData();
                }
                else
                {
                    localStorage.removeItem('formData');

                }
                
            });
        } else {
            console.error("This script only runs in Excel.");
        }
    });
});
function setupEventListeners() {
    const dropdownButton = document.getElementById('dropdownButton');
    if (!dropdownButton.dataset.eventAdded) {
        dropdownButton.addEventListener('click', toggleDropdown);
        dropdownButton.dataset.eventAdded = true;
    }

    const checkboxes = document.querySelectorAll('#dropdownContent input[type=checkbox]');
    checkboxes.forEach(checkbox => {
        checkbox.addEventListener('change', function () {
            updateMessageAndExcel(this.value, this.checked);
        });
    });

   
    if (!document.getElementById('groupDropdownButton').dataset.eventAdded) {
        document.getElementById('groupDropdownButton').addEventListener('click', toggleGroupDropdown);
        document.getElementById('groupDropdownButton').dataset.eventAdded = true;
    }
    if (!document.getElementById('message').dataset.eventAdded) {
        document.getElementById('message').addEventListener('input', updateMessageCounter);
        document.getElementById('message').dataset.eventAdded = true;
    }
    if (!document.getElementById('launchButton').dataset.eventAdded) {
        document.getElementById('launchButton').addEventListener('click', launchCampaign);
        document.getElementById('launchButton').dataset.eventAdded = true;
    }
    if (!document.getElementById('backButton').dataset.eventAdded) {
        document.getElementById('backButton').addEventListener('click', () => {
            localStorage.setItem('backNavigation', 'true');
           
            window.location.href = 'Home.html';
        });
        document.getElementById('backButton').dataset.eventAdded = true;
    }
    if (!document.getElementById('campaignForm').dataset.eventAdded) {
        document.getElementById('campaignForm').addEventListener('submit', function (event) {
            event.preventDefault();
            launchCampaign();
        });
        document.getElementById('campaignForm').dataset.eventAdded = true;
    }

    document.getElementById('template').addEventListener('change', function () {
        const templateId = this.value;
        if (templateId) {
            fetchTemplateById(templateId).then(() => {
                document.getElementById('message').readOnly = true;
                document.getElementById('dropdownButton').style.display = 'none';
            });
        } else {
            document.getElementById('message').readOnly = false;
            document.getElementById('dropdownButton').style.display = 'block';
            document.getElementById('message').value = ''; // Clear the message field
        }
    });


    if (!document.body.dataset.fetchDataCalled) {
        fetchSenders();
        fetchGroups();
        fetchTemplates();
        document.body.dataset.fetchDataCalled = true;
    }
}
function fetchData() {
    return Promise.all([fetchSenders(), fetchGroups(), fetchTemplates()]);
}
function saveFormData() {
    const formData = {
        campaignName: document.getElementById('campaignName').value,
        sender: document.getElementById('sender').value,
        message: document.getElementById('message').value,
        selectedGroups: Array.from(document.querySelectorAll('#groupDropdownContent input[type=checkbox]:checked')).map(checkbox => checkbox.value),
        templateId: document.getElementById('template').value
    };
    localStorage.setItem('formData', JSON.stringify(formData));
}
function restoreFormData() {
    const formData = JSON.parse(localStorage.getItem('formData'));
    if (formData) {
        document.getElementById('campaignName').value = formData.campaignName;
        document.getElementById('sender').value = formData.sender;
        document.getElementById('message').value = formData.message;

        // Restore template selection
        if (formData.templateId) {
            document.getElementById('template').value = formData.templateId;
        }

        // Restore selected groups
        formData.selectedGroups.forEach(group => {
            const checkbox = document.querySelector(`#groupDropdownContent input[value="${group}"]`);
            if (checkbox) {
                checkbox.checked = true;
            }
        });

        // Restore sender
        const senderSelect = document.getElementById('sender');
        Array.from(senderSelect.options).forEach(option => {
            if (option.value === formData.sender) {
                option.selected = true;
            }
        });

        //// Call function to update UI based on restored settings (if needed)
        //updateUIBasedOnSettings();
    }
}
function updateExcelWithPlaceholders(placeholders) {
    Excel.run(function (context) {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        console.log('Updating Excel sheet with placeholders...');

     
        const usedRange = sheet.getUsedRange();
        usedRange.load('rowCount, columnCount');

        return context.sync().then(() => {
            console.log(`Used range - rows: ${usedRange.rowCount}, columns: ${usedRange.columnCount}`);

            if (usedRange.columnCount > 1) {
                const columnRange = sheet.getRangeByIndexes(0, 1, usedRange.rowCount, usedRange.columnCount - 1);
                console.log(`Clearing range from row 0, column 1 to row ${usedRange.rowCount - 1}, column ${usedRange.columnCount - 1}`);
                columnRange.clear(); 
            } else {
                console.log('No columns to clear beyond column A');
            }

            if (placeholders.length === 0) {
                console.log('No placeholders to update.');
                return context.sync();
            }

            placeholders.forEach((placeholder, index) => {
                const cell = sheet.getCell(0, index + 1); 
                console.log(`Updating cell at row 0, column ${index + 1} with value: ${placeholder}`);
                cell.values = [[placeholder]];
                cell.format.fill.color = "#0B5394";
                cell.format.font.color = "#FFFFFF"; 
                cell.format.font.bold = true; 
                cell.format.font.size = 12; 
                cell.format.horizontalAlignment = "Center"; 
                
            });

            return context.sync().then(() => {
                console.log('Excel sheet updated successfully');
            });
        });
    }).catch(function (error) {
        console.error('Error updating Excel with placeholders:', error);
    });
}
function fetchTemplateById(templateId) {
    const loadingIndicator = document.getElementById('loadingIndicator');
    loadingIndicator.style.display = 'block';

    const apiGetTemplateById = `${process.env.API_GetTemplateById}${templateId}`;
    console.log(`Fetching template with ID: ${templateId}`);

    fetchWithAuth(apiGetTemplateById, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    })
        .then(response => {
            console.log(`Response status: ${response.status}`);
            if (!response.ok) {
                throw new Error(`Network response was not ok: ${response.statusText}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('Response data:', data);
            if (data && data.data && data.data.smsTemplate) {
                const template = data.data.smsTemplate;
                console.log('Template fetched:', template);
                displayTemplate(template);
                const placeholders = extractPlaceholders(template.text);
                console.log('Extracted placeholders:', placeholders);
                updateMessageCounter();

                updateExcelWithPlaceholders(placeholders);
            } else {
                console.error('Unexpected response format:', data);
            }
        })
        .catch(error => {
            console.error(`Error fetching template with ID ${templateId}:`, error);
        })
        .finally(() => {
            loadingIndicator.style.display = 'none';
        });
}
function extractPlaceholders(template) {
    const regex = /\{(\w+)\}/g;
    const placeholders = [];
    let match;
    while ((match = regex.exec(template)) !== null) {
        placeholders.push(match[1]);
    }
    console.log('Extracted placeholders:', placeholders);
    return placeholders;
}
async function refreshToken() {
    const refreshToken = localStorage.getItem('refreshToken');
    const accessToken = localStorage.getItem('accessToken');
    const apiRefreshToken = process.env.API_RefreshToken;
    const TenantKey = process.env.Key_Tenant;

    try {
        const response = await fetch(apiRefreshToken, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${accessToken}`,
                'Tenant': TenantKey
            },
            body: JSON.stringify({ RefreshToken: refreshToken })
        });

        if (!response.ok) {
            throw new Error(`Failed to refresh token: ${response.statusText}`);
        }

        const data = await response.json();
        localStorage.setItem('accessToken', data.data.accessToken);
        localStorage.setItem('refreshToken', data.data.refreshToken);
        return data.data.accessToken;
    } catch (error) {
        console.error('Error refreshing token:', error);
        throw error;
    }
}
async function fetchWithAuth(url, options, retry = true) {
    const accessToken = localStorage.getItem('accessToken');
    const TenantKey = process.env.Key_Tenant;
    options.headers = {
        ...options.headers,
        'Authorization': `Bearer ${accessToken}`,
        'Tenant': TenantKey
    };

    try {
        const response = await fetch(url, options);

        if (response.status === 401 && retry) {
            const newAccessToken = await refreshToken();
            options.headers['Authorization'] = `Bearer ${newAccessToken}`;
            return fetchWithAuth(url, options, false);
        }

        return response;
    } catch (error) {
        console.error(`Error fetching ${url}:`, error);
        throw error;
    }
}
function fetchGroups() {
    const loadingIndicator = document.getElementById('loadingIndicator');
    loadingIndicator.style.display = 'block';

    const apiGetGroup = process.env.API_GetGroup;

    fetchWithAuth(apiGetGroup, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    })
        .then(response => {
            if (!response.ok) {
                throw new Error(`Network response was not ok: ${response.statusText}`);
            }
            return response.json();
        })
        .then(data => {
            if (data && data.data && data.data.phoneBooks) {
                populateGroups(data.data.phoneBooks);
            } else {
                console.error('Unexpected response format:', data);
            }
        })
        .catch(error => {
            console.error('Error fetching groups:', error);
        })
        .finally(() => {
            loadingIndicator.style.display = 'none';
        });
}
function populateGroups(groups) {
    const groupDropdownContent = document.getElementById('groupDropdownContent');
    groups.forEach(group => {
        const label = document.createElement('label');
        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.value = group.recordGuid;
        checkbox.addEventListener('change', fetchContactsFromGroup);
        label.appendChild(checkbox);
        label.appendChild(document.createTextNode(group.name));
        groupDropdownContent.appendChild(label);
    });
    restoreFormData();
}
function fetchContactsFromGroup() {
    const loadingIndicator = document.getElementById('loadingIndicator');
    loadingIndicator.style.display = 'block';

 
    const selectedGroups = Array.from(document.querySelectorAll('#groupDropdownContent input[type=checkbox]:checked')).map(checkbox => checkbox.value);
    const apiGetContactByGroup = process.env.API_GetContactByGroup;

    
    const fetchPromises = selectedGroups.filter(groupId => !groupContactsMap[groupId]).map(groupId => {
        const apiUrl = `${apiGetContactByGroup}${groupId}`;
        return fetchWithAuth(apiUrl, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        }).then(response => {
            if (!response.ok) {
                throw new Error(`Network response was not ok: ${response.statusText}`);
            }
            return response.json();
        }).then(data => {
        
            groupContactsMap[groupId] = data.data.phoneBookContacts.map(contact => [contact.mobileNumber]);
        });
    });

    Promise.all(fetchPromises)
        .then(() => {
            
            Object.keys(groupContactsMap).forEach(groupId => {
                if (!selectedGroups.includes(groupId)) {
                    delete groupContactsMap[groupId];
                }
            });

            
            updateExcelWithContacts();
        })
        .catch(error => {
            console.error('Error fetching contacts:', error);
        })
        .finally(() => {
            loadingIndicator.style.display = 'none';
        });
}
function fetchSenders() {
    const loadingIndicator = document.getElementById('loadingIndicator');
    loadingIndicator.style.display = 'block';

    const apiGetSender = process.env.API_GETSender;

    fetchWithAuth(apiGetSender, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    })
        .then(response => {
            if (!response.ok) {
                throw new Error(`Network response was not ok: ${response.statusText}`);
            }
            return response.json();
        })
        .then(data => {
            if (data && data.data && data.data.senders) {
                populateSenders(data.data.senders);
            } else {
                console.error('Unexpected response format:', data);
            }
        })
        .catch(error => {
            console.error('Error fetching senders:', error);
        })
        .finally(() => {
            loadingIndicator.style.display = 'none';
        });
}
function populateSenders(senders) {
    const senderSelect = document.getElementById('sender');
    senders.forEach(sender => {
        const option = document.createElement('option');
        option.value = sender.recordGuid;
        option.text = sender.name;
        senderSelect.appendChild(option);
    });
    restoreFormData();
}
function fetchTemplates() {
    const loadingIndicator = document.getElementById('loadingIndicator');
    loadingIndicator.style.display = 'block';

    const apiGetTemplates = process.env.API_GetTemplate;

    fetchWithAuth(apiGetTemplates, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    })
        .then(response => {
            if (!response.ok) {
                throw new Error(`Network response was not ok: ${response.statusText}`);
            }
            return response.json();
        })
        .then(data => {
            if (data && data.data && data.data.smsTemplates) {
                populateTemplates(data.data.smsTemplates);
            } else {
                console.error('Unexpected response format:', data);
            }
        })
        .catch(error => {
            console.error('Error fetching templates:', error);
        })
        .finally(() => {
            loadingIndicator.style.display = 'none';
        });
}
function populateTemplates(templates) {
    const templateSelect = document.getElementById('template');
    templateSelect.innerHTML = '<option value="">Select a template</option>'; // Clear existing options

    templates.forEach(template => {
        const option = document.createElement('option');
        option.value = template.recordGuid;
        option.text = template.name;
        templateSelect.appendChild(option);
    });
    restoreFormData();
}
function displayTemplate(template) {
    const messageField = document.getElementById('message');
    messageField.value = template.text;
}
function toggleDropdown() {
    const dropdownContent = document.getElementById('dropdownContent');
    dropdownContent.style.display = dropdownContent.style.display === 'block' ? 'none' : 'block';
}
function toggleGroupDropdown() {
    document.getElementById("groupDropdownContent").classList.toggle("show");
}
function updateMessageCounter() {
    const message = document.getElementById('message').value;
    const messageCounter = document.getElementById('messageCounter');
    const charCount = message.length;
    const messageCount = Math.ceil(charCount / 160);
    const charsLeft = 160 - (charCount % 160);
    messageCounter.innerHTML = `${charCount}/160 characters | ${charsLeft} characters left | ${messageCount} message${messageCount > 1 ? 's' : ''}`;
}
function getNonEmptyMobileNumbers() {
    return Excel.run(function (context) {
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // Load the used range and then sync context to get the row count
        const usedRange = sheet.getUsedRange();
        usedRange.load("rowCount");

        return context.sync().then(() => {
            // Adjust range to exclude the header
            const mobileNumberColumn = sheet.getRange("A2:A" + usedRange.rowCount);
            mobileNumberColumn.load("values");

            return context.sync().then(() => {
                // Filter to collect non-empty, non-null entries as an array
                const phoneNumbers = mobileNumberColumn.values
                    .filter(row => {
                        const value = row[0];
                        return value !== null && value !== undefined && String(value).trim() !== '';
                    })
                    .map(row => String(row[0]).trim());

                console.log(`Collected phone numbers: ${phoneNumbers}`);
                return phoneNumbers;
            });
        });
    }).catch(function (error) {
        console.error('Error collecting non-empty mobile numbers:', error);
    });
}
function countNonEmptyMobileNumbers() {
    return Excel.run(function (context) {
        const sheet = context.workbook.worksheets.getActiveWorksheet();

      
        const usedRange = sheet.getUsedRange();
        usedRange.load("rowCount");

        return context.sync().then(() => {
            // Adjust range to exclude the header
            const mobileNumberColumn = sheet.getRange("A2:A" + usedRange.rowCount);
            mobileNumberColumn.load("values");

            return context.sync().then(() => {
                // Filter to count non-empty, non-null entries excluding the header
                count = mobileNumberColumn.values.filter(row => {
                    const value = row[0];
                    return value !== null && value !== undefined && String(value).trim() !== '';
                }).length;

                console.log(count);
                return count;
            });
        });
    }).catch(function (error) {
        console.error('Error counting non-empty mobile numbers:', error);
    });
}

async function validateCampaignNormally(campaignName, campaignContent, senderId, phoneNumbers) {
    const apiValidate = process.env.API_Validate;

    const requestBody = {
        Campaign: {
            name: campaignName,
            content: campaignContent,
            senderId: senderId
        },
        PhoneNumbers: phoneNumbers.map(String) 
    };

    try {
        const response = await fetchWithAuth(apiValidate, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestBody)
        });

        if (!response.ok) {
            throw new Error(`Network response was not ok: ${response.statusText}`);
        }

        const data = await response.json();
        console.log('Campaign validated successfully:', data);
        return data;
    } catch (error) {
        console.error('Error validating campaign:', error);
        throw error;
    }
}
async function validateCampaignWithFile(campaignName, campaignContent, senderId) {
    const apiValidatefile = process.env.API_Validate_File;

    try {
        await Excel.run(async (context) => {
           
            const workbook = context.workbook;
            const worksheet = workbook.worksheets.getActiveWorksheet();

            const usedRange = worksheet.getUsedRange();
            usedRange.load("values");

            await context.sync();

         
            const workbookBlob = await getWorkbookBlob(usedRange.values);

            const formData = new FormData();
            formData.append('file', workbookBlob, "MyExcelFile.xlsx");
            formData.append('Campaign', JSON.stringify({
                Name: campaignName,
                Content: campaignContent,
                SenderId: senderId,
                HasShortUrl: false,
                Variables: [],
                HasBlacklistShortUrl: false
            }));
       
            const uploadResponse = await fetchWithAuth(apiValidatefile, {
                method: 'POST',
                body: formData
            });

            if (!uploadResponse.ok) {
                throw new Error(`Network response was not ok: ${uploadResponse.statusText}`);
            }

            const data = await uploadResponse.json();
            console.log('Campaign validated with file successfully:', data);
            return data;
        });
    } catch (error) {
        console.error("Error validating campaign with file: ", error);
        throw error;
    }
}
async function getWorkbookBlob(data) {
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet("Sheet1");

    worksheet.addRows(data);

    const uint8Array = await workbook.xlsx.writeBuffer();
    return new Blob([uint8Array], { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" });
}
function launchCampaign() {
    if (isCampaignLaunching) {
        showNotification('Campaign launch already in progress...', "Valid");
        return;
    }
    isCampaignLaunching = true;

    const campaignName = document.getElementById('campaignName').value;
    const sender = document.getElementById('sender').value;
    const message = document.getElementById('message').value;

    getNonEmptyMobileNumbers().then(phoneNumbers => {
        if (!campaignName || !sender || !message || phoneNumbers.length === 0) {
            showNotification('Please enter all mandatory fields: campaign name, sender, mobile number, and message.', "Error");
            isCampaignLaunching = false;
            return;
        }

        hasPlaceholders().then(hasPlaceholders => {
            if (hasPlaceholders) {
                // Validate using file
                validateCampaignWithFile(campaignName, message, sender).then(data => {
                    handleValidationSuccess(data, campaignName);
                }).catch(error => {
                    handleValidationError(error);
                });
            } else {
                // Validate normally
                validateCampaignNormally(campaignName, message, sender, phoneNumbers).then(data => {
                    handleValidationSuccess(data, campaignName);
                }).catch(error => {
                    handleValidationError(error);
                });
            }
        }).catch(error => {
            console.error('Error checking for placeholders:', error);
            showNotification('Error checking for placeholders. Please try again.', "Error");
            isCampaignLaunching = false;
        });
    }).catch(error => {
        console.error('Error collecting phone numbers:', error);
        showNotification('Error collecting phone numbers. Please try again.', "Error");
        isCampaignLaunching = false;
    });
}
function handleValidationSuccess(data, campaignName) {
    const validationData = {
        campaignName: campaignName,
        campaignId: data.data.campaignId,
        validUrl: data.data.validUrl,
        inValidUrl: data.data.inValidUrl,
        totalValidCount: data.data.totalValidCount,
        totalInValidCount: data.data.totalInValidCount,
        totalCost: data.data.totalValidRate,
        reason: data.data.reason
    };
    localStorage.setItem('validationData', JSON.stringify(validationData));
    saveFormData();
    window.location.href = 'SendCampaign.html';
}
function handleValidationError(error) {
    console.error('Error validating campaign:', error);
    showNotification('Error validating campaign. Please try again.', "Error");
    isCampaignLaunching = false;
}
function hasPlaceholders() {
    return Excel.run(function (context) {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        const headerRange = sheet.getRange("A1:Z1");
        headerRange.load("values");

        return context.sync().then(() => {
            const headers = headerRange.values[0];
            const placeholders = headers.slice(1).filter(header => header.trim() !== '');
            return placeholders.length > 0;
        });
    }).catch(function (error) {
        console.error('Error detecting placeholders:', error);
        return false;
    });
}
window.onclick = function (event) {
    if (!event.target.matches('.dropdown-button')) {
        var dropdowns = document.getElementsByClassName("dropdown-content");
        for (var i = 0; i < dropdowns.length; i++) {
            var openDropdown = dropdowns[i];
            if (openDropdown.classList.contains('show')) {
                openDropdown.classList.remove('show');
            }
        }
    }
}





function updateMessageAndExcel(fieldName, isChecked) {
    Excel.run(function (context) {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        const headersRange = sheet.getRange("A1:Z1");
        headersRange.load('values');

        return context.sync().then(() => {
            let currentValues = headersRange.values[0];
            let mobileIndex = currentValues.indexOf("Mobile Number");

            if (isChecked) {
                if (!fieldOrder.includes(fieldName)) {
                    fieldOrder.push(fieldName);
                }
            } else {
                fieldOrder = fieldOrder.filter(item => item !== fieldName);
            }

            // Clear all columns except the Mobile Number column
            currentValues.fill("", mobileIndex + 1, currentValues.length);

            // Add selected fields to the columns
            fieldOrder.forEach((field, index) => {
                currentValues[mobileIndex + 1 + index] = field;
            });

            headersRange.values = [currentValues];

            // Update the message field with selected fields
            const messageField = document.getElementById('message');
            const currentMessage = messageField.value;

            // Extract placeholders from the current message
            const placeholders = extractPlaceholders(currentMessage);

            // Add or remove the selected field placeholder
            if (isChecked) {
                if (!placeholders.includes(fieldName)) {
                    placeholders.push(fieldName);
                }
            } else {
                const index = placeholders.indexOf(fieldName);
                if (index !== -1) {
                    placeholders.splice(index, 1);
                }
            }

            // Update the message content with placeholders
            const updatedMessage = placeholders.map(field => `{${field}}`).join(' ');
            messageField.value = updatedMessage;

            return context.sync();
        });
    }).catch(function (error) {
        console.error("Error updating Excel: " + error);
    });
}


function updateExcelWithContacts() {
    Excel.run(function (context) {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        const mobileNumberColumn = sheet.getRange("A2:A1048576"); // Assuming default Excel row limit

        mobileNumberColumn.clear();

        let currentRow = 2;
        Object.values(groupContactsMap).forEach(contacts => {
            const range = sheet.getRange(`A${currentRow}:A${currentRow + contacts.length - 1}`);
            range.values = contacts;
            currentRow += contacts.length;
        });

        return context.sync();
    }).catch(function (error) {
        console.log("Error updating Excel: " + error);
    });
}
function AddMobileNumberColumn() {
    Excel.run(function (context) {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        const range = sheet.getRange("A1:A1");

        range.values = [["Mobile Number"]];
        range.values = [["Mobile Number"]];
        range.format.fill.color = "#008000"; // Green background color
        range.format.font.color = "#FFFFFF"; // White text color
        range.format.font.bold = true; // Bold text
        range.format.horizontalAlignment = "Center"; // Ce
        range.format.autofitColumns();
        return context.sync();
    }).catch(function (error) {
        console.log("Error: " + error);
    });
}
function showNotification(message, type) {
    const notification = document.getElementById('notification');
    notification.textContent = message;
    notification.className = 'notification';
    notification.classList.add(type === "error" ? 'error' : 'success');
    notification.classList.add('show');
    setTimeout(() => {
        notification.classList.remove('show');
    }, 3000);
}






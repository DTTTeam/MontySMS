/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./JS/SMSCampaign.js":
/*!***************************!*\
  !*** ./JS/SMSCampaign.js ***!
  \***************************/
/***/ (() => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nvar isCampaignLaunching = false;\nvar groupContactsMap = {}; // Map to store group contacts\nvar groupContactNumbers = new Set(); // Set to track group contact numbers\nvar manualContacts = new Set(); // S\nvar fieldOrder = [];\nvar count = 0;\nvar phoneNumbers = [];\nvar fixedOrder = [\"Mobile Number\", \"LongUrl\", \"Title\", \"FirstName\", \"LastName\", \"Country\", \"Email\", \"Address\", \"City\", \"Gender\"];\nvar placeholderMap = {\n  \"title\": \"Title\",\n  \"firstname\": \"FirstName\",\n  \"lastname\": \"LastName\",\n  \"mobile\": \"Mobile Number\",\n  \"email\": \"Email\",\n  \"dob\": \"DOB\",\n  \"address\": \"Address\",\n  \"city\": \"City\",\n  \"gender\": \"Gender\",\n  \"country\": \"Country\"\n};\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  Office.onReady(function (info) {\n    if (info.host === Office.HostType.Excel) {\n      AddMobileNumberColumn();\n      setupEventListeners();\n      var container = document.querySelector('.campaign-container');\n      if (container) {\n        container.style.backgroundColor = '#fff'; // Ensure background is white\n      }\n      fetchData().then(function () {\n        var backNavigation = localStorage.getItem('backNavigation');\n        if (backNavigation === 'true') {\n          localStorage.removeItem('backNavigation');\n          updateMessageCounter();\n          restoreFormData();\n        } else {\n          localStorage.removeItem('formData');\n        }\n      });\n    } else {\n      console.error(\"This script only runs in Excel.\");\n    }\n  });\n});\nfunction setupEventListeners() {\n  var templateDropdown = document.getElementById('template');\n  templateDropdown.addEventListener('change', handleTemplateChange);\n  var columnTypeDropdown = document.getElementById('columnTypeDropdown');\n  columnTypeDropdown.addEventListener('change', handleColumnTypeChange);\n  var dropdownButton = document.getElementById('dropdownButton');\n  if (!dropdownButton.dataset.eventAdded) {\n    dropdownButton.addEventListener('click', toggleDropdown);\n    dropdownButton.dataset.eventAdded = true;\n  }\n  var checkboxes = document.querySelectorAll('#dropdownContent input[type=checkbox]');\n  checkboxes.forEach(function (checkbox) {\n    checkbox.addEventListener('change', function () {\n      updateMessage(this.value, this.checked);\n    });\n  });\n  var contactDropdownButton = document.getElementById('contactDropdownButton');\n  if (!contactDropdownButton.dataset.eventAdded) {\n    contactDropdownButton.addEventListener('click', toggleContactDropdown);\n    contactDropdownButton.dataset.eventAdded = true;\n  }\n  var groupDropdownButton = document.getElementById('groupDropdownButton');\n  if (!groupDropdownButton.dataset.eventAdded) {\n    groupDropdownButton.addEventListener('click', toggleGroupDropdown);\n    groupDropdownButton.dataset.eventAdded = true;\n  }\n  var messageElement = document.getElementById('message');\n  if (!messageElement.dataset.eventAdded) {\n    messageElement.addEventListener('input', updateMessageCounter);\n    messageElement.dataset.eventAdded = true;\n  }\n  var launchButton = document.getElementById('launchButton');\n  if (!launchButton.dataset.eventAdded) {\n    launchButton.addEventListener('click', launchCampaign);\n    launchButton.dataset.eventAdded = true;\n  }\n  var backButton = document.getElementById('backButton');\n  if (!backButton.dataset.eventAdded) {\n    backButton.addEventListener('click', function () {\n      localStorage.setItem('backNavigation', 'true');\n      window.location.href = 'Home.html';\n    });\n    backButton.dataset.eventAdded = true;\n  }\n  var campaignForm = document.getElementById('campaignForm');\n  if (!campaignForm.dataset.eventAdded) {\n    campaignForm.addEventListener('submit', function (event) {\n      event.preventDefault();\n      launchCampaign();\n    });\n    campaignForm.dataset.eventAdded = true;\n  }\n  templateDropdown.addEventListener('change', function () {\n    var templateId = this.value;\n    if (templateId) {\n      fetchTemplateById(templateId).then(function () {\n        messageElement.readOnly = true;\n        dropdownButton.style.display = 'none';\n        document.getElementById('shortenUrlButton').style.display = 'none';\n      })[\"catch\"](function (error) {\n        console.error(\"Error fetching template: \".concat(error));\n      });\n    } else {\n      messageElement.readOnly = false;\n      dropdownButton.style.display = 'block';\n      messageElement.value = '';\n      document.getElementById('shortenUrlButton').style.display = 'block';\n    }\n  });\n  if (!document.body.dataset.fetchDataCalled) {\n    fetchSenders();\n    fetchGroups();\n    fetchTemplates();\n    fetchBalance();\n    fetchContacts();\n    document.body.dataset.fetchDataCalled = true;\n  }\n  var urlModal = document.getElementById(\"urlModal\");\n  var shortenUrlButton = document.getElementById(\"shortenUrlButton\");\n  var closeModal = document.getElementsByClassName(\"close\")[0];\n  var urlForm = document.getElementById(\"urlForm\");\n  shortenUrlButton.onclick = function () {\n    urlModal.style.display = \"block\";\n  };\n  closeModal.onclick = function () {\n    urlModal.style.display = \"none\";\n  };\n  window.onclick = function (event) {\n    if (event.target == urlModal) {\n      urlModal.style.display = \"none\";\n    }\n  };\n  urlForm.onsubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(event) {\n      var longUrl, shortUrl;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            event.preventDefault();\n            longUrl = document.getElementById(\"longUrl\").value;\n            _context.prev = 2;\n            _context.next = 5;\n            return getShortUrl(longUrl);\n          case 5:\n            shortUrl = _context.sent;\n            insertShortUrlIntoMessage(shortUrl);\n            urlModal.style.display = \"none\";\n            _context.next = 14;\n            break;\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](2);\n            console.error('Error getting short URL:', _context.t0);\n            showNotification('Error getting short URL. Please try again.', \"error\");\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[2, 10]]);\n    }));\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}\nfunction fetchData() {\n  return _fetchData.apply(this, arguments);\n} // Group and contact function\nfunction _fetchData() {\n  _fetchData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return fetchSenders();\n        case 2:\n          _context4.next = 4;\n          return fetchGroups();\n        case 4:\n          _context4.next = 6;\n          return fetchTemplates();\n        case 6:\n          _context4.next = 8;\n          return fetchBalance();\n        case 8:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return _fetchData.apply(this, arguments);\n}\nfunction fetchGroups() {\n  var loadingIndicator = document.getElementById('loadingIndicator');\n  loadingIndicator.style.display = 'block';\n  var apiGetGroup = \"https://omni-apis.montymobile.com//notification/api/v1/PhoneBook/get-all\";\n  fetchWithAuth(apiGetGroup, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(function (response) {\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok: \".concat(response.statusText));\n    }\n    return response.json();\n  }).then(function (data) {\n    if (data && data.data && data.data.phoneBooks) {\n      populateGroups(data.data.phoneBooks);\n    } else {\n      console.error('Unexpected response format:', data);\n    }\n  })[\"catch\"](function (error) {\n    console.error('Error fetching groups:', error);\n  })[\"finally\"](function () {\n    loadingIndicator.style.display = 'none';\n  });\n}\nfunction populateGroups(groups) {\n  var groupDropdownContent = document.getElementById('groupDropdownContent');\n\n  // Clear previous content to prevent duplicates\n  groupDropdownContent.innerHTML = \"\\n        <input type=\\\"text\\\" id=\\\"groupSearch\\\" placeholder=\\\"Search for groups...\\\" onkeyup=\\\"filterGroups()\\\">\\n    \";\n  groups.forEach(function (group) {\n    var label = document.createElement('label');\n    var checkbox = document.createElement('input');\n    checkbox.type = 'checkbox';\n    checkbox.value = group.recordGuid;\n    checkbox.addEventListener('change', fetchContactsFromGroup);\n    label.appendChild(checkbox);\n    label.appendChild(document.createTextNode(group.name));\n    groupDropdownContent.appendChild(label);\n  });\n  restoreFormData();\n}\nfunction fetchContactsFromGroup() {\n  var loadingIndicator = document.getElementById('loadingIndicator');\n  loadingIndicator.style.display = 'block';\n  var selectedGroups = Array.from(document.querySelectorAll('#groupDropdownContent input[type=checkbox]:checked')).map(function (checkbox) {\n    return checkbox.value;\n  });\n  var apiGetContactByGroup = \"https://omni-apis.montymobile.com//notification/api/v1/PhoneBook/contact?PhoneBookGuid=\";\n  var fetchPromises = selectedGroups.filter(function (groupId) {\n    return !groupContactsMap[groupId];\n  }).map(function (groupId) {\n    var apiUrl = \"\".concat(apiGetContactByGroup).concat(groupId);\n    return fetchWithAuth(apiUrl, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok: \".concat(response.statusText));\n      }\n      return response.json();\n    }).then(function (data) {\n      groupContactsMap[groupId] = data.data.phoneBookContacts.map(function (contact) {\n        return contact.mobileNumber;\n      });\n      groupContactsMap[groupId].forEach(function (contact) {\n        return groupContactNumbers.add(contact);\n      });\n    });\n  });\n  Promise.all(fetchPromises).then(function () {\n    Object.keys(groupContactsMap).forEach(function (groupId) {\n      if (!selectedGroups.includes(groupId)) {\n        groupContactsMap[groupId].forEach(function (contact) {\n          return groupContactNumbers[\"delete\"](contact);\n        });\n        delete groupContactsMap[groupId];\n      }\n    });\n    updateExcel();\n  })[\"catch\"](function (error) {\n    console.error('Error fetching contacts:', error);\n  })[\"finally\"](function () {\n    loadingIndicator.style.display = 'none';\n  });\n}\nfunction manageContactInExcel(event) {\n  var mobileNumber = event.target.value;\n  var isChecked = event.target.checked;\n  if (isChecked) {\n    addContactToExcel(mobileNumber);\n  } else {\n    removeContactFromExcel(mobileNumber);\n  }\n}\nfunction addContactToExcel(mobileNumber) {\n  manualContacts.add(mobileNumber);\n  updateExcel();\n}\nfunction removeContactFromExcel(mobileNumber) {\n  manualContacts[\"delete\"](mobileNumber);\n  updateExcel();\n}\nfunction toggleContactDropdown() {\n  var contactDropdownContent = document.getElementById(\"contactDropdownContent\");\n  var groupDropdownContent = document.getElementById(\"groupDropdownContent\");\n\n  // Hide group dropdown if it's open\n  if (groupDropdownContent.classList.contains(\"show\")) {\n    groupDropdownContent.classList.remove(\"show\");\n  }\n\n  // Toggle contact dropdown\n  contactDropdownContent.classList.toggle(\"show\");\n}\nwindow.filterContacts = function () {\n  var searchInput = document.getElementById('contactSearch').value.toLowerCase();\n  var labels = document.querySelectorAll('#contactDropdownContent label');\n  labels.forEach(function (label) {\n    var text = label.textContent.toLowerCase();\n    if (text.includes(searchInput)) {\n      label.style.display = '';\n    } else {\n      label.style.display = 'none';\n    }\n  });\n};\nwindow.filterGroups = function () {\n  var searchInput = document.getElementById('groupSearch').value.toLowerCase();\n  var labels = document.querySelectorAll('#groupDropdownContent label');\n  labels.forEach(function (label) {\n    var text = label.textContent.toLowerCase();\n    if (text.includes(searchInput)) {\n      label.style.display = '';\n    } else {\n      label.style.display = 'none';\n    }\n  });\n};\nfunction fetchContacts() {\n  var loadingIndicator = document.getElementById('loadingIndicator');\n  loadingIndicator.style.display = 'block';\n  var apiGetContact = \"https://omni-apis.montymobile.com/notification/api/v1/Contact?PageIndex=1&PageSize=50\";\n  fetchWithAuth(apiGetContact, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(function (response) {\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok: \".concat(response.statusText));\n    }\n    return response.json();\n  }).then(function (data) {\n    if (data && data.data && data.data.contacts) {\n      populateContacts(data.data.contacts);\n    } else {\n      console.error('Unexpected response format:', data);\n    }\n  })[\"catch\"](function (error) {\n    console.error('Error fetching contacts:', error);\n  })[\"finally\"](function () {\n    loadingIndicator.style.display = 'none';\n  });\n}\nfunction populateContacts(contacts) {\n  var contactDropdownContent = document.getElementById('contactDropdownContent');\n\n  // Clear previous content to prevent duplicates\n  contactDropdownContent.innerHTML = \"\\n        <input type=\\\"text\\\" id=\\\"contactSearch\\\" placeholder=\\\"Search for contacts...\\\" onkeyup=\\\"filterContacts()\\\">\\n    \";\n  contacts.forEach(function (contact) {\n    var label = document.createElement('label');\n    var checkbox = document.createElement('input');\n    checkbox.type = 'checkbox';\n    checkbox.value = contact.mobileNumber;\n    checkbox.addEventListener('change', manageContactInExcel);\n    label.appendChild(checkbox);\n    label.appendChild(document.createTextNode(\"\".concat(contact.firstName, \" \").concat(contact.lastName, \" (\").concat(contact.mobileNumber, \")\")));\n    contactDropdownContent.appendChild(label);\n  });\n}\nfunction toggleGroupDropdown() {\n  var groupDropdownContent = document.getElementById(\"groupDropdownContent\");\n  var contactDropdownContent = document.getElementById(\"contactDropdownContent\");\n\n  // Hide contact dropdown if it's open\n  if (contactDropdownContent.classList.contains(\"show\")) {\n    contactDropdownContent.classList.remove(\"show\");\n  }\n\n  // Toggle group dropdown\n  groupDropdownContent.classList.toggle(\"show\");\n}\nfunction updateExcel() {\n  Excel.run(function (context) {\n    var sheet = context.workbook.worksheets.getActiveWorksheet();\n    var usedRange = sheet.getUsedRange();\n    usedRange.load('values');\n    return context.sync().then(function () {\n      var currentValues = usedRange.values.map(function (row) {\n        return row[0];\n      }).filter(function (value) {\n        return value;\n      }); // Existing values in column A\n      console.log('Current values:', currentValues);\n\n      // Collect group contacts\n      var groupContacts = [];\n      Object.values(groupContactsMap).forEach(function (contacts) {\n        groupContacts.push.apply(groupContacts, _toConsumableArray(contacts));\n      });\n\n      // Collect manual contacts\n      var manualContactsArray = Array.from(manualContacts);\n\n      // Combine both lists\n      var newValues = _toConsumableArray(new Set([].concat(manualContactsArray, groupContacts))); // Remove duplicates\n\n      // Create 2D array for setting values in Excel\n      var updatedValues = newValues.map(function (value) {\n        return [value];\n      });\n\n      // Ensure we have at least one row to avoid mismatch error\n      if (updatedValues.length === 0) {\n        updatedValues.push([\"\"]);\n      }\n\n      // Update Excel\n      var rangeToUpdate = sheet.getRange(\"A2:A\".concat(updatedValues.length + 1));\n      rangeToUpdate.values = updatedValues;\n\n      // Clear remaining cells\n      if (updatedValues.length < usedRange.values.length) {\n        var rangeToClear = sheet.getRange(\"A\".concat(updatedValues.length + 2, \":A\").concat(usedRange.values.length + 1));\n        rangeToClear.clear();\n      }\n      return context.sync();\n    });\n  })[\"catch\"](function (error) {\n    console.log(\"Error updating Excel:\", error);\n  });\n}\n//End \n\n//Fetch\nfunction refreshToken() {\n  return _refreshToken.apply(this, arguments);\n}\nfunction _refreshToken() {\n  _refreshToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n    var refreshToken, accessToken, apiRefreshToken, TenantKey, response, data;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          refreshToken = localStorage.getItem('refreshToken');\n          accessToken = localStorage.getItem('accessToken');\n          apiRefreshToken = \"https://omni-apis.montymobile.com/member/api/v1/auth/refresh-token\";\n          TenantKey = \"98df9ffe-fa84-41ee-9293-33614722d952\";\n          _context5.prev = 4;\n          _context5.next = 7;\n          return fetch(apiRefreshToken, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': \"Bearer \".concat(accessToken),\n              'Tenant': TenantKey\n            },\n            body: JSON.stringify({\n              RefreshToken: refreshToken\n            })\n          });\n        case 7:\n          response = _context5.sent;\n          if (response.ok) {\n            _context5.next = 10;\n            break;\n          }\n          throw new Error(\"Failed to refresh token: \".concat(response.statusText));\n        case 10:\n          _context5.next = 12;\n          return response.json();\n        case 12:\n          data = _context5.sent;\n          localStorage.setItem('accessToken', data.data.accessToken);\n          localStorage.setItem('refreshToken', data.data.refreshToken);\n          return _context5.abrupt(\"return\", data.data.accessToken);\n        case 18:\n          _context5.prev = 18;\n          _context5.t0 = _context5[\"catch\"](4);\n          console.error('Error refreshing token:', _context5.t0);\n          throw _context5.t0;\n        case 22:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5, null, [[4, 18]]);\n  }));\n  return _refreshToken.apply(this, arguments);\n}\nfunction fetchWithAuth(_x2, _x3) {\n  return _fetchWithAuth.apply(this, arguments);\n} //URL and Balance\nfunction _fetchWithAuth() {\n  _fetchWithAuth = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(url, options) {\n    var retry,\n      accessToken,\n      TenantKey,\n      response,\n      newAccessToken,\n      _args6 = arguments;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          retry = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : true;\n          accessToken = localStorage.getItem('accessToken');\n          TenantKey = \"98df9ffe-fa84-41ee-9293-33614722d952\";\n          options.headers = _objectSpread(_objectSpread({}, options.headers), {}, {\n            'Authorization': \"Bearer \".concat(accessToken),\n            'Tenant': TenantKey\n          });\n          _context6.prev = 4;\n          _context6.next = 7;\n          return fetch(url, options);\n        case 7:\n          response = _context6.sent;\n          if (!(response.status === 401 && retry)) {\n            _context6.next = 14;\n            break;\n          }\n          _context6.next = 11;\n          return refreshToken();\n        case 11:\n          newAccessToken = _context6.sent;\n          options.headers['Authorization'] = \"Bearer \".concat(newAccessToken);\n          return _context6.abrupt(\"return\", fetchWithAuth(url, options, false));\n        case 14:\n          return _context6.abrupt(\"return\", response);\n        case 17:\n          _context6.prev = 17;\n          _context6.t0 = _context6[\"catch\"](4);\n          console.error(\"Error fetching \".concat(url, \":\"), _context6.t0);\n          throw _context6.t0;\n        case 21:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6, null, [[4, 17]]);\n  }));\n  return _fetchWithAuth.apply(this, arguments);\n}\nfunction insertShortUrlIntoMessage(shortUrl) {\n  var messageField = document.getElementById('message');\n  messageField.value += \" \".concat(shortUrl);\n  updateMessageCounter();\n}\nfunction getShortUrl(_x4) {\n  return _getShortUrl.apply(this, arguments);\n}\nfunction _getShortUrl() {\n  _getShortUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(longUrl) {\n    var apiUrl, response, data;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          apiUrl = \"https://omni-apis.montymobile.com/notification/api/v1/SMSCampaign/short-url\";\n          _context7.prev = 1;\n          _context7.next = 4;\n          return fetchWithAuth(apiUrl, {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n        case 4:\n          response = _context7.sent;\n          if (response.ok) {\n            _context7.next = 7;\n            break;\n          }\n          throw new Error(\"Network response was not ok: \".concat(response.statusText));\n        case 7:\n          _context7.next = 9;\n          return response.json();\n        case 9:\n          data = _context7.sent;\n          console.log(data); // Log the entire response\n          return _context7.abrupt(\"return\", data.data.shortUrl);\n        case 14:\n          _context7.prev = 14;\n          _context7.t0 = _context7[\"catch\"](1);\n          console.error('Error getting short URL:', _context7.t0);\n          throw _context7.t0;\n        case 18:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7, null, [[1, 14]]);\n  }));\n  return _getShortUrl.apply(this, arguments);\n}\nfunction fetchBalance() {\n  var apiGetBalance = \"\".concat(\"https://omni-apis.montymobile.com/billing/api/v1/clientaccount/balance/get-default-balance?ClientGuid=\").concat(localStorage.getItem(\"clientId\"));\n  fetchWithAuth(apiGetBalance, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(function (response) {\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok: \".concat(response.statusText));\n    }\n    return response.json();\n  }).then(function (data) {\n    if (data && data.data && Array.isArray(data.data) && data.data.length > 0) {\n      var balanceData = data.data[0]; // Accessing the first element of the data array\n      document.getElementById('currentBalance').textContent = \"\".concat(balanceData.currentBalance, \" \").concat(balanceData.currencyCode);\n    } else {\n      console.error('Unexpected response format:', data);\n    }\n  })[\"catch\"](function (error) {\n    console.error('Error fetching balance:', error);\n  });\n}\n\n//Sender\nfunction fetchSenders() {\n  var loadingIndicator = document.getElementById('loadingIndicator');\n  loadingIndicator.style.display = 'block';\n  var apiGetSender = \"https://omni-apis.montymobile.com/notification/api/v1/sender/get-all?StatusTag=APPROVED&ServiceTag=ONE_WAY_SMS\";\n  fetchWithAuth(apiGetSender, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(function (response) {\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok: \".concat(response.statusText));\n    }\n    return response.json();\n  }).then(function (data) {\n    if (data && data.data && data.data.senders) {\n      populateSenders(data.data.senders);\n    } else {\n      console.error('Unexpected response format:', data);\n    }\n  })[\"catch\"](function (error) {\n    console.error('Error fetching senders:', error);\n  })[\"finally\"](function () {\n    loadingIndicator.style.display = 'none';\n  });\n}\nfunction populateSenders(senders) {\n  var senderSelect = document.getElementById('sender');\n  senderSelect.innerHTML = '<option value=\"\">Select a sender</option>'; // Clear existing options and add default option\n\n  senders.forEach(function (sender) {\n    var option = document.createElement('option');\n    option.value = sender.recordGuid;\n    option.text = sender.name;\n    senderSelect.appendChild(option);\n  });\n  restoreFormData(); // Make sure to call restoreFormData after populating the dropdown\n}\n\n//Template\nfunction fetchTemplates() {\n  var loadingIndicator = document.getElementById('loadingIndicator');\n  loadingIndicator.style.display = 'block';\n  var apiGetTemplates = \"https://omni-apis.montymobile.com/notification/api/v1/smstemplate/get-all\";\n  fetchWithAuth(apiGetTemplates, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(function (response) {\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok: \".concat(response.statusText));\n    }\n    return response.json();\n  }).then(function (data) {\n    if (data && data.data && data.data.smsTemplates) {\n      populateTemplates(data.data.smsTemplates);\n    } else {\n      console.error('Unexpected response format:', data);\n    }\n  })[\"catch\"](function (error) {\n    console.error('Error fetching templates:', error);\n  })[\"finally\"](function () {\n    loadingIndicator.style.display = 'none';\n  });\n}\nfunction populateTemplates(templates) {\n  var templateSelect = document.getElementById('template');\n  templateSelect.innerHTML = '<option value=\"\">Select a template</option>'; // Clear existing options\n\n  templates.forEach(function (template) {\n    var option = document.createElement('option');\n    option.value = template.recordGuid;\n    option.text = template.name;\n    templateSelect.appendChild(option);\n  });\n  restoreFormData();\n}\nfunction fetchTemplateById(templateId) {\n  return new Promise(function (resolve, reject) {\n    var loadingIndicator = document.getElementById('loadingIndicator');\n    loadingIndicator.style.display = 'block';\n    var apiGetTemplateById = \"\".concat(\"https://omni-apis.montymobile.com/notification/api/v1/smstemplate?smstemplateguid=\").concat(templateId);\n    console.log(\"Fetching template with ID: \".concat(templateId));\n    fetchWithAuth(apiGetTemplateById, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      console.log(\"Response status: \".concat(response.status));\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok: \".concat(response.statusText));\n      }\n      return response.json();\n    }).then(function (data) {\n      console.log('Response data:', data);\n      if (data && data.data && data.data.smsTemplate) {\n        var template = data.data.smsTemplate;\n        console.log('Template fetched:', template);\n        displayTemplate(template);\n        var placeholders = extractPlaceholders(template.text);\n        console.log('Extracted placeholders:', placeholders);\n        updateMessageCounter();\n        resolve(template);\n      } else {\n        console.error('Unexpected response format:', data);\n        reject('Unexpected response format');\n      }\n    })[\"catch\"](function (error) {\n      console.error(\"Error fetching template with ID \".concat(templateId, \":\"), error);\n      reject(error);\n    })[\"finally\"](function () {\n      loadingIndicator.style.display = 'none';\n    });\n  });\n}\nfunction handleTemplateChange() {\n  var templateId = document.getElementById('template').value;\n  var messageField = document.getElementById('message');\n  var dropdownButton = document.getElementById('dropdownButton');\n  if (templateId) {\n    messageField.readOnly = true;\n    dropdownButton.style.display = 'none';\n    fetchTemplateById(templateId).then(function (template) {\n      if (template && template.text) {\n        messageField.value = template.text;\n      } else {\n        console.error('Template text is undefined or template is null');\n      }\n    })[\"catch\"](function (error) {\n      console.error(\"Error fetching template: \".concat(error));\n    });\n  } else {\n    messageField.readOnly = false;\n    dropdownButton.style.display = 'block';\n    messageField.value = ''; // Clear the message field\n  }\n}\nfunction displayTemplate(template) {\n  var messageField = document.getElementById('message');\n  messageField.value = template.text;\n}\nfunction extractPlaceholders(message) {\n  var regex = /\\{(\\w+)\\}/g;\n  var placeholders = [];\n  var match;\n  while ((match = regex.exec(message)) !== null) {\n    placeholders.push(\"{\".concat(match[1], \"}\"));\n  }\n  return placeholders;\n}\n\n//Campaign\nfunction downloadExcelFile(_x5) {\n  return _downloadExcelFile.apply(this, arguments);\n}\nfunction _downloadExcelFile() {\n  _downloadExcelFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(data) {\n    var workbook, worksheet, headerRow, buffer, blob, url, anchor;\n    return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          workbook = new ExcelJS.Workbook();\n          worksheet = workbook.addWorksheet(\"Sheet1\");\n          worksheet.addRows(data);\n\n          // Apply formatting to headers\n          headerRow = worksheet.getRow(1);\n          headerRow.eachCell(function (cell, colNumber) {\n            cell.fill = {\n              type: 'pattern',\n              pattern: 'solid',\n              fgColor: {\n                argb: 'FF0B5394'\n              } // Dark blue color\n            };\n            cell.font = {\n              color: {\n                argb: 'FFFFFFFF'\n              },\n              // White color\n              bold: true,\n              size: 12\n            };\n            cell.alignment = {\n              horizontal: 'center'\n            };\n          });\n          _context8.next = 7;\n          return workbook.xlsx.writeBuffer();\n        case 7:\n          buffer = _context8.sent;\n          blob = new Blob([buffer], {\n            type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n          });\n          url = window.URL.createObjectURL(blob);\n          anchor = document.createElement(\"a\");\n          anchor.href = url;\n          anchor.download = \"SampleDestinationsWithVariablesAndLongUrl .xlsx\";\n          document.body.appendChild(anchor);\n          anchor.click();\n          document.body.removeChild(anchor);\n          window.URL.revokeObjectURL(url);\n        case 17:\n        case \"end\":\n          return _context8.stop();\n      }\n    }, _callee8);\n  }));\n  return _downloadExcelFile.apply(this, arguments);\n}\nvar loadingIndicator = document.getElementById('loadingIndicator');\nfunction showLoading() {\n  loadingIndicator.style.display = 'block';\n}\nfunction hideLoading() {\n  loadingIndicator.style.display = 'none';\n}\nfunction handleValidationError() {\n  isCampaignLaunching = false;\n  hideLoading();\n}\nfunction handleValidationSuccess(response, campaignName) {\n  hideLoading();\n  var data = response.data;\n  var validationData = {\n    campaignName: campaignName,\n    campaignId: data.campaignId,\n    validUrl: data.validUrl || '',\n    // Handle null values\n    inValidUrl: data.inValidUrl || '',\n    // Handle null values\n    totalValidCount: data.totalValidCount || 0,\n    // Handle null values\n    totalInValidCount: data.totalInValidCount || 0,\n    // Handle null values\n    totalCost: data.totalValidRate || 0,\n    // Handle null values\n    reason: data.reason || ''\n  };\n  console.log(validationData);\n  if (validationData.reason === \"do not have enough balance\") {\n    showNotification(\"You do not have enough balance.\");\n    return; // Prevent navigation to the next HTML page\n  }\n  localStorage.setItem('validationData', JSON.stringify(validationData));\n  saveFormData();\n  window.location.href = 'SendCampaign.html';\n}\nfunction validateCampaignNormally(_x6, _x7, _x8, _x9, _x10, _x11) {\n  return _validateCampaignNormally.apply(this, arguments);\n}\nfunction _validateCampaignNormally() {\n  _validateCampaignNormally = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(campaignName, campaignContent, senderId, phoneNumbers, hasShortUrl, longUrl) {\n    var apiValidate, placeholders, requestBody, response, data;\n    return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n      while (1) switch (_context9.prev = _context9.next) {\n        case 0:\n          showLoading(); // Show loading indicator\n          apiValidate = \"https://omni-apis.montymobile.com/notification/api/v1/SMSCampaign/campaign-contact\";\n          placeholders = extractPlaceholders(campaignContent);\n          requestBody = {\n            Campaign: {\n              ChannelId: \"acaaa147-6836-4d60-97c3-3fb1db02fb63\",\n              Name: campaignName,\n              Content: campaignContent,\n              SenderId: senderId,\n              HasShortUrl: hasShortUrl,\n              LongUrl: longUrl,\n              ClientAccountId: localStorage.getItem('clientId'),\n              Variables: placeholders,\n              HasBlacklistShortUrl: false\n            },\n            PhoneNumbers: phoneNumbers.map(String)\n          };\n          _context9.prev = 4;\n          _context9.next = 7;\n          return fetchWithAuth(apiValidate, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(requestBody)\n          });\n        case 7:\n          response = _context9.sent;\n          if (response.ok) {\n            _context9.next = 10;\n            break;\n          }\n          throw new Error(\"Network response was not ok: \".concat(response.statusText));\n        case 10:\n          _context9.next = 12;\n          return response.json();\n        case 12:\n          data = _context9.sent;\n          return _context9.abrupt(\"return\", data);\n        case 16:\n          _context9.prev = 16;\n          _context9.t0 = _context9[\"catch\"](4);\n          console.error('Error validating campaign:', _context9.t0);\n          throw _context9.t0;\n        case 20:\n          _context9.prev = 20;\n          hideLoading(); // Hide loading indicator when the operation is complete\n          return _context9.finish(20);\n        case 23:\n        case \"end\":\n          return _context9.stop();\n      }\n    }, _callee9, null, [[4, 16, 20, 23]]);\n  }));\n  return _validateCampaignNormally.apply(this, arguments);\n}\nfunction validateCampaignWithFile(_x12, _x13, _x14, _x15, _x16) {\n  return _validateCampaignWithFile.apply(this, arguments);\n}\nfunction _validateCampaignWithFile() {\n  _validateCampaignWithFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(campaignName, campaignContent, senderId, hasShortUrl, longUrl) {\n    var apiValidateFile, tenantKey, SMSCHannel, placeholders;\n    return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n      while (1) switch (_context11.prev = _context11.next) {\n        case 0:\n          showLoading(); // Show loading indicator\n          apiValidateFile = \"https://omni-apis.montymobile.com/notification/api/v1/SMSCampaign/campaign-file\";\n          tenantKey = \"98df9ffe-fa84-41ee-9293-33614722d952\";\n          SMSCHannel = \"acaaa147-6836-4d60-97c3-3fb1db02fb63\";\n          placeholders = extractPlaceholders(campaignContent);\n          _context11.prev = 5;\n          _context11.next = 8;\n          return Excel.run( /*#__PURE__*/function () {\n            var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(context) {\n              var workbook, worksheet, usedRange, workbookBlob, formData, response, data;\n              return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n                while (1) switch (_context10.prev = _context10.next) {\n                  case 0:\n                    workbook = context.workbook;\n                    worksheet = workbook.worksheets.getActiveWorksheet();\n                    usedRange = worksheet.getUsedRange();\n                    usedRange.load(\"values\");\n                    _context10.next = 6;\n                    return context.sync();\n                  case 6:\n                    _context10.next = 8;\n                    return getWorkbookBlob(usedRange.values);\n                  case 8:\n                    workbookBlob = _context10.sent;\n                    formData = new FormData();\n                    formData.append('file', workbookBlob, \"SampleDestinationsWithVariablesAndLongUrl.xlsx\");\n                    formData.append('countryCode', '');\n                    formData.append('Campaign', JSON.stringify({\n                      channelId: SMSCHannel,\n                      Name: campaignName,\n                      Content: campaignContent,\n                      SenderId: senderId,\n                      HasShortUrl: hasShortUrl,\n                      LongUrl: longUrl,\n                      ClientAccountId: localStorage.getItem('clientId'),\n                      Variables: placeholders,\n                      HasBlacklistShortUrl: false\n                    }));\n                    formData.append('LongUrlFromFile', \"false\");\n                    _context10.next = 16;\n                    return fetchWithAuth(apiValidateFile, {\n                      method: 'POST',\n                      headers: {\n                        'Accept': 'application/json, text/plain, */*',\n                        'Accept-Language': 'en-US,en;q=0.9,ar;q=0.8',\n                        'Cache-Control': 'no-cache',\n                        'Connection': 'keep-alive',\n                        'Origin': 'https://app.montymobile.com',\n                        'Pragma': 'no-cache',\n                        'Referer': 'https://app.montymobile.com/',\n                        'Sec-Fetch-Dest': 'empty',\n                        'Sec-Fetch-Mode': 'cors',\n                        'Sec-Fetch-Site': 'same-site',\n                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36',\n                        'sec-ch-ua': '\"Google Chrome\";v=\"125\", \"Chromium\";v=\"125\", \"Not.A/Brand\";v=\"24\"',\n                        'sec-ch-ua-mobile': '?0',\n                        'sec-ch-ua-platform': '\"Windows\"'\n                      },\n                      body: formData\n                    });\n                  case 16:\n                    response = _context10.sent;\n                    if (response.ok) {\n                      _context10.next = 19;\n                      break;\n                    }\n                    throw new Error(\"Network response was not ok: \".concat(response.statusText));\n                  case 19:\n                    _context10.next = 21;\n                    return response.json();\n                  case 21:\n                    data = _context10.sent;\n                    handleValidationSuccess(data, campaignName);\n                  case 23:\n                  case \"end\":\n                    return _context10.stop();\n                }\n              }, _callee10);\n            }));\n            return function (_x20) {\n              return _ref4.apply(this, arguments);\n            };\n          }());\n        case 8:\n          _context11.next = 14;\n          break;\n        case 10:\n          _context11.prev = 10;\n          _context11.t0 = _context11[\"catch\"](5);\n          console.error(\"Error validating campaign with file: \", _context11.t0);\n          showNotification('Error validating campaign. Please try again.', \"Error\");\n        case 14:\n          _context11.prev = 14;\n          hideLoading(); // Hide loading indicator when the operation is complete\n          return _context11.finish(14);\n        case 17:\n        case \"end\":\n          return _context11.stop();\n      }\n    }, _callee11, null, [[5, 10, 14, 17]]);\n  }));\n  return _validateCampaignWithFile.apply(this, arguments);\n}\nfunction launchCampaign() {\n  if (isCampaignLaunching) {\n    showNotification('Campaign launch already in progress...', \"Valid\");\n    return;\n  }\n  isCampaignLaunching = true;\n  showLoading(); // Show loading indicator\n  localStorage.removeItem('formData');\n  var campaignName = document.getElementById('campaignName').value;\n  var sender = document.getElementById('sender').value;\n  var message = document.getElementById('message').value;\n  var longUrlInput = document.getElementById('longUrl').value;\n  getNonEmptyMobileNumbers().then(function (phoneNumbers) {\n    if (!campaignName || !sender || !message || phoneNumbers.length <= 1) {\n      showNotification('Please enter all mandatory fields: campaign name, sender, mobile number, and message.', \"Error\");\n      isCampaignLaunching = false;\n      hideLoading(); // Hide loading indicator\n      return;\n    }\n    var hasShortUrl = false;\n    var longUrl = null;\n    if (longUrlInput) {\n      hasShortUrl = true;\n      longUrl = longUrlInput;\n      getShortUrl(longUrlInput).then(function (shortUrl) {\n        handleColumnType().then(function (isVariable) {\n          if (isVariable) {\n            validateCampaignWithFile(campaignName, message, sender, hasShortUrl, longUrl).then(function (data) {\n              handleValidationSuccess(data, campaignName);\n            })[\"catch\"](function (error) {\n              handleValidationError();\n            });\n          } else {\n            validateCampaignNormally(campaignName, message, sender, phoneNumbers, hasShortUrl, longUrl).then(function (data) {\n              handleValidationSuccess(data, campaignName);\n            })[\"catch\"](function (error) {\n              handleValidationError();\n            });\n          }\n        })[\"catch\"](function (error) {\n          console.error('Error checking column type:', error);\n          showNotification('Error checking column type. Please try again.', \"Error\");\n          isCampaignLaunching = false;\n          hideLoading(); // Hide loading indicator\n        });\n      })[\"catch\"](function (error) {\n        console.error('Error getting short URL:', error);\n        showNotification('Error getting short URL. Please try again.', \"Error\");\n        isCampaignLaunching = false;\n        hideLoading(); // Hide loading indicator\n      });\n    } else {\n      handleColumnType().then(function (isVariable) {\n        if (isVariable) {\n          validateCampaignWithFile(campaignName, message, sender, hasShortUrl, longUrl).then(function (data) {\n            handleValidationSuccess(data, campaignName);\n          })[\"catch\"](function (error) {\n            handleValidationError();\n          });\n        } else {\n          validateCampaignNormally(campaignName, message, sender, phoneNumbers, hasShortUrl, longUrl).then(function (data) {\n            handleValidationSuccess(data, campaignName);\n          })[\"catch\"](function (error) {\n            handleValidationError();\n          });\n        }\n      })[\"catch\"](function (error) {\n        console.error('Error checking column type:', error);\n        showNotification('Error checking column type. Please try again.', \"Error\");\n        isCampaignLaunching = false;\n        hideLoading(); // Hide loading indicator\n      });\n    }\n  })[\"catch\"](function (error) {\n    console.error('Error collecting phone numbers:', error);\n    showNotification('Error collecting phone numbers. Please try again.', \"Error\");\n    isCampaignLaunching = false;\n    hideLoading(); // Hide loading indicator\n  });\n}\n\n//function handleValidationError() {\n//    isCampaignLaunching = false;\n//}\n//function handleValidationSuccess(response, campaignName) {\n//    const loadingIndicator = document.getElementById('loadingIndicator');\n//    loadingIndicator.style.display = 'block';\n//    const data = response.data;\n\n//    var validationData = {\n//        campaignName: campaignName,\n//        campaignId: data.campaignId,\n//        validUrl: data.validUrl || '', // Handle null values\n//        inValidUrl: data.inValidUrl || '', // Handle null values\n//        totalValidCount: data.totalValidCount || 0, // Handle null values\n//        totalInValidCount: data.totalInValidCount || 0, // Handle null values\n//        totalCost: data.totalValidRate || 0, // Handle null values\n//        reason: data.reason || ''\n//    };\n\n//    if (validationData.reason === \"do not have enough balance\") {\n//        showNotification(\"You do not have enough balance.\");\n//        loadingIndicator.style.display = 'none';\n//        return; // Prevent navigation to the next HTML page\n//    }\n\n//    localStorage.setItem('validationData', JSON.stringify(validationData));\n//    saveFormData();\n//    window.location.href = 'SendCampaign.html';\n//}\n\n//async function validateCampaignNormally(campaignName, campaignContent, senderId, phoneNumbers, hasShortUrl, longUrl) {\n\n//    const apiValidate = process.env.API_Validate;\n//    const placeholders = extractPlaceholders(campaignContent);\n\n//    const requestBody = {\n//        Campaign: {\n//            ChannelId: process.env.SMS_Channel,\n//            Name: campaignName,\n//            Content: campaignContent,\n//            SenderId: senderId,\n//            HasShortUrl: hasShortUrl,\n//            LongUrl: longUrl,\n//            ClientAccountId: localStorage.getItem('clientId'),\n//            Variables: placeholders,\n//            HasBlacklistShortUrl: false\n//        },\n//        PhoneNumbers: phoneNumbers.map(String)\n//    };\n\n//    try {\n//        const response = await fetchWithAuth(apiValidate, {\n//            method: 'POST',\n//            headers: {\n//                'Content-Type': 'application/json'\n//            },\n//            body: JSON.stringify(requestBody)\n//        });\n\n//        if (!response.ok) {\n//            throw new Error(`Network response was not ok: ${response.statusText}`);\n//        }\n\n//        const data = await response.json();\n\n//        return data;\n//    } catch (error) {\n//        console.error('Error validating campaign:', error);\n//        throw error;\n//    }\n//}\n//async function validateCampaignWithFile(campaignName, campaignContent, senderId, hasShortUrl, longUrl) {\n//    const apiValidateFile = process.env.API_Validate_File;\n//    const tenantKey = process.env.Key_Tenant;\n//    const SMSCHannel = process.env.SMS_Channel;\n//    const placeholders = extractPlaceholders(campaignContent);\n\n//    try {\n//        await Excel.run(async (context) => {\n//            const workbook = context.workbook;\n//            const worksheet = workbook.worksheets.getActiveWorksheet();\n\n//            const usedRange = worksheet.getUsedRange();\n//            usedRange.load(\"values\");\n\n//            await context.sync();\n\n//            const workbookBlob = await getWorkbookBlob(usedRange.values);\n\n//            const formData = new FormData();\n//            formData.append('file', workbookBlob, \"SampleDestinationsWithVariablesAndLongUrl.xlsx\");\n//            formData.append('countryCode', '');\n//            formData.append('Campaign', JSON.stringify({\n//                channelId: SMSCHannel,\n//                Name: campaignName,\n//                Content: campaignContent,\n//                SenderId: senderId,\n//                HasShortUrl: hasShortUrl,\n//                LongUrl: longUrl,\n//                ClientAccountId: localStorage.getItem('clientId'),\n//                Variables: placeholders,\n//                HasBlacklistShortUrl: false\n//            }));\n//            formData.append('LongUrlFromFile', \"false\");\n\n//            const response = await fetchWithAuth(apiValidateFile, {\n//                method: 'POST',\n//                headers: {\n//                    'Accept': 'application/json, text/plain, */*',\n//                    'Accept-Language': 'en-US,en;q=0.9,ar;q=0.8',\n//                    'Cache-Control': 'no-cache',\n//                    'Connection': 'keep-alive',\n//                    'Origin': 'https://app.montymobile.com',\n//                    'Pragma': 'no-cache',\n//                    'Referer': 'https://app.montymobile.com/',\n//                    'Sec-Fetch-Dest': 'empty',\n//                    'Sec-Fetch-Mode': 'cors',\n//                    'Sec-Fetch-Site': 'same-site',\n//                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36',\n//                    'sec-ch-ua': '\"Google Chrome\";v=\"125\", \"Chromium\";v=\"125\", \"Not.A/Brand\";v=\"24\"',\n//                    'sec-ch-ua-mobile': '?0',\n//                    'sec-ch-ua-platform': '\"Windows\"',\n//                },\n//                body: formData\n//            });\n\n//            if (!response.ok) {\n//                throw new Error(`Network response was not ok: ${response.statusText}`);\n//            }\n\n//            const data = await response.json();\n\n//            handleValidationSuccess(data, campaignName);\n\n//        });\n//    } catch (error) {\n//        console.error(\"Error validating campaign with file: \", error);\n//        showNotification('Error validating campaign. Please try again.', \"Error\");\n//    }\n//}\n//function launchCampaign() {\n\n//    if (isCampaignLaunching) {\n//        showNotification('Campaign launch already in progress...', \"Valid\");\n\n//        return;\n//    }\n//    isCampaignLaunching = true;\n//    localStorage.removeItem('formData');\n//    const campaignName = document.getElementById('campaignName').value;\n//    const sender = document.getElementById('sender').value;\n//    let message = document.getElementById('message').value;\n//    const longUrlInput = document.getElementById('longUrl').value;\n\n//    getNonEmptyMobileNumbers().then(phoneNumbers => {\n//        if (!campaignName || !sender || !message || phoneNumbers.length <= 1) {\n//            showNotification('Please enter all mandatory fields: campaign name, sender, mobile number, and message.', \"Error\");\n//            isCampaignLaunching = false;\n//            return;\n//        }\n\n//        let hasShortUrl = false;\n//        let longUrl = null;\n\n//        if (longUrlInput) {\n//            hasShortUrl = true;\n//            longUrl = longUrlInput;\n//            getShortUrl(longUrlInput).then(shortUrl => {\n\n//                handleColumnType().then(isVariable => {\n//                    if (isVariable) {\n//                        validateCampaignWithFile(campaignName, message, sender, hasShortUrl, longUrl).then(data => {\n//                            handleValidationSuccess(data, campaignName);\n\n//                        }).catch(error => {\n//                            handleValidationError();\n//                        });\n//                    } else {\n\n//                        validateCampaignNormally(campaignName, message, sender, phoneNumbers, hasShortUrl, longUrl).then(data => {\n//                            handleValidationSuccess(data, campaignName);\n//                        }).catch(error => {\n//                            handleValidationError();\n//                        });\n//                    }\n//                }).catch(error => {\n//                    console.error('Error checking column type:', error);\n//                    showNotification('Error checking column type. Please try again.', \"Error\");\n//                    isCampaignLaunching = false;\n//                });\n//            }).catch(error => {\n//                console.error('Error getting short URL:', error);\n//                showNotification('Error getting short URL. Please try again.', \"Error\");\n//                isCampaignLaunching = false;\n//            });\n//        } else {\n//            handleColumnType().then(isVariable => {\n//                if (isVariable) {\n//                    validateCampaignWithFile(campaignName, message, sender, hasShortUrl, longUrl).then(data => {\n//                        handleValidationSuccess(data, campaignName);\n//                    }).catch(error => {\n//                        handleValidationError();\n//                    });\n//                } else {\n//                    validateCampaignNormally(campaignName, message, sender, phoneNumbers, hasShortUrl, longUrl).then(data => {\n//                        handleValidationSuccess(data, campaignName);\n//                    }).catch(error => {\n//                        handleValidationError();\n//                    });\n//                }\n//            }).catch(error => {\n//                console.error('Error checking column type:', error);\n//                showNotification('Error checking column type. Please try again.', \"Error\");\n//                isCampaignLaunching = false;\n//            });\n//        }\n//    }).catch(error => {\n//        console.error('Error collecting phone numbers:', error);\n//        showNotification('Error collecting phone numbers. Please try again.', \"Error\");\n//        isCampaignLaunching = false;\n//    });\n//}\n\nfunction saveFormData() {\n  var formData = {\n    campaignName: document.getElementById('campaignName').value,\n    sender: document.getElementById('sender').value,\n    message: document.getElementById('message').value,\n    selectedGroups: Array.from(document.querySelectorAll('#groupDropdownContent input[type=checkbox]:checked')).map(function (checkbox) {\n      return {\n        groupId: checkbox.value,\n        contacts: groupContactsMap[checkbox.value] || []\n      };\n    }),\n    selectedContacts: Array.from(document.querySelectorAll('#contactDropdownContent input[type=checkbox]:checked')).map(function (checkbox) {\n      return checkbox.value;\n    }),\n    templateId: document.getElementById('template').value,\n    type: document.getElementById('columnTypeDropdown').value,\n    manualContacts: JSON.stringify(Array.from(manualContacts))\n  };\n  localStorage.setItem('formData', JSON.stringify(formData));\n\n  // Save Excel data\n  Excel.run( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(context) {\n      var sheet, usedRange, excelData;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            sheet = context.workbook.worksheets.getActiveWorksheet();\n            usedRange = sheet.getUsedRange();\n            usedRange.load('values');\n            _context2.next = 5;\n            return context.sync();\n          case 5:\n            excelData = usedRange.values;\n            localStorage.setItem('excelData', JSON.stringify(excelData));\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return function (_x17) {\n      return _ref2.apply(this, arguments);\n    };\n  }())[\"catch\"](function (error) {\n    console.error('Error saving Excel data:', error);\n  });\n}\nfunction restoreFormData() {\n  var formData = JSON.parse(localStorage.getItem('formData'));\n  if (formData) {\n    document.getElementById('campaignName').value = formData.campaignName;\n    document.getElementById('sender').value = formData.sender;\n    document.getElementById('message').value = formData.message;\n    document.getElementById('columnTypeDropdown').value = formData.type;\n\n    // Restore template selection\n    if (formData.templateId) {\n      document.getElementById('template').value = formData.templateId;\n      document.getElementById('shortenUrlButton').style.display = 'none';\n      document.getElementById('message').readOnly = true;\n      document.getElementById('dropdownButton').style.display = 'none';\n    }\n\n    // Restore selected groups and their contacts\n    formData.selectedGroups.forEach(function (group) {\n      var checkbox = document.querySelector(\"#groupDropdownContent input[value=\\\"\".concat(group.groupId, \"\\\"]\"));\n      if (checkbox) {\n        checkbox.checked = true;\n      }\n      groupContactsMap[group.groupId] = group.contacts;\n      group.contacts.forEach(function (contact) {\n        return groupContactNumbers.add(contact);\n      });\n    });\n\n    // Restore selected contacts\n    formData.selectedContacts.forEach(function (contact) {\n      var checkbox = document.querySelector(\"#contactDropdownContent input[value=\\\"\".concat(contact, \"\\\"]\"));\n      if (checkbox) {\n        checkbox.checked = true;\n      }\n    });\n\n    // Restore manual contacts\n    manualContacts.clear();\n    var restoredManualContacts = new Set(JSON.parse(formData.manualContacts));\n    var _iterator = _createForOfIteratorHelper(restoredManualContacts),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var contact = _step.value;\n        manualContacts.add(contact);\n      }\n\n      // Handle column type restoration\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    if (formData.type === 'Variable') {\n      AddAllColumns();\n    } else {\n      AddMobileNumberColumn();\n    }\n\n    // Restore Excel data\n    var excelData = JSON.parse(localStorage.getItem('excelData'));\n    if (excelData) {\n      Excel.run( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(context) {\n          var sheet, range;\n          return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n            while (1) switch (_context3.prev = _context3.next) {\n              case 0:\n                sheet = context.workbook.worksheets.getActiveWorksheet();\n                range = sheet.getRange(\"A1:\".concat(String.fromCharCode(64 + excelData[0].length)).concat(excelData.length));\n                range.values = excelData;\n                _context3.next = 5;\n                return context.sync();\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }, _callee3);\n        }));\n        return function (_x18) {\n          return _ref3.apply(this, arguments);\n        };\n      }())[\"catch\"](function (error) {\n        console.error('Error restoring Excel data:', error);\n      });\n    }\n  }\n}\nfunction handleColumnType() {\n  return new Promise(function (resolve) {\n    var columnType = document.getElementById('columnTypeDropdown').value;\n    resolve(columnType === 'Variable');\n  });\n}\nfunction handleColumnTypeChange() {\n  var columnType = document.getElementById('columnTypeDropdown').value;\n  if (columnType === 'Header') {\n    AddMobileNumberColumn();\n  } else if (columnType === 'Variable') {\n    AddAllColumns();\n  }\n}\nfunction updateMessage(fieldName, isChecked) {\n  var messageField = document.getElementById('message');\n  var currentMessage = messageField.value;\n\n  // Extract placeholders from the current message\n  var placeholders = extractPlaceholders(currentMessage);\n\n  // Add or remove the selected field placeholder\n  if (isChecked) {\n    if (!placeholders.includes(fieldName.toLowerCase())) {\n      messageField.value += \" {\".concat(fieldName.toLowerCase(), \"}\");\n    }\n  } else {\n    messageField.value = currentMessage.replace(\" {\".concat(fieldName.toLowerCase(), \"}\"), '');\n  }\n  updateMessageCounter();\n}\nfunction toggleDropdown() {\n  var dropdownContent = document.getElementById('dropdownContent');\n  dropdownContent.classList.toggle('show');\n}\nfunction updateMessageCounter() {\n  var message = document.getElementById('message').value;\n  var messageCounter = document.getElementById('messageCounter');\n  var unicodeRegex = /[^\\u0000-\\u007F]/;\n  var isUnicode = unicodeRegex.test(message);\n  var charLimit = isUnicode ? 70 : 160;\n  var charCount = message.length;\n  var messageCount = Math.ceil(charCount / charLimit);\n  var charsLeft = charLimit - charCount % charLimit;\n  messageCounter.innerHTML = \"\".concat(charCount, \"/\").concat(charLimit, \" characters | \").concat(charsLeft, \" characters left | \").concat(messageCount, \" message\").concat(messageCount > 1 ? 's' : '');\n}\nfunction getNonEmptyMobileNumbers() {\n  return Excel.run(function (context) {\n    var sheet = context.workbook.worksheets.getActiveWorksheet();\n    var usedRange = sheet.getUsedRange();\n    usedRange.load(\"rowCount\");\n    return context.sync().then(function () {\n      var mobileNumberColumn = sheet.getRange(\"A2:A\" + usedRange.rowCount);\n      mobileNumberColumn.load(\"values\");\n      return context.sync().then(function () {\n        var phoneNumbers = mobileNumberColumn.values.filter(function (row) {\n          var value = row[0];\n          return value !== null && value !== undefined && String(value).trim() !== '';\n        }).map(function (row) {\n          return String(row[0]).trim();\n        });\n        return phoneNumbers;\n      });\n    });\n  })[\"catch\"](function (error) {\n    console.error('Error collecting non-empty mobile numbers:', error);\n  });\n}\nfunction AddAllColumns() {\n  Excel.run(function (context) {\n    var sheet = context.workbook.worksheets.getActiveWorksheet();\n    var fixedOrder = [\"Mobile Number\", \"LongUrl\", \"Title\", \"FirstName\", \"LastName\", \"Country\", \"Email\", \"Address\", \"City\", \"Gender\"];\n    var usedRange = sheet.getUsedRange();\n    usedRange.load('rowCount, columnCount');\n    return context.sync().then(function () {\n      // Clear all rows except for the Mobile Number column\n      if (usedRange.rowCount > 1) {\n        var dataRange = sheet.getRangeByIndexes(1, 1, usedRange.rowCount - 1, usedRange.columnCount - 1);\n        dataRange.clear();\n      }\n      fixedOrder.forEach(function (header, index) {\n        var cell = sheet.getCell(0, index);\n        cell.values = [[header]];\n        cell.format.fill.color = \"#ed204c\"; // Set header cell color to #ed204c\n        cell.format.font.color = \"#FFFFFF\"; // White text color\n        cell.format.font.bold = true; // Bold text\n        cell.format.font.size = 12; // Font size\n        cell.format.horizontalAlignment = \"Center\"; // Center alignment\n      });\n      return context.sync().then(function () {\n        // Auto fit columns\n        sheet.getUsedRange().getEntireColumn().format.autofitColumns();\n        /*  validateAndFillMobileNumbers(); // Ensure validation is called after setting headers*/\n        console.log('All columns added and fitted successfully');\n      });\n    });\n  })[\"catch\"](function (error) {\n    console.error('Error adding all columns:', error);\n  });\n}\nfunction AddMobileNumberColumn() {\n  Excel.run(function (context) {\n    var sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // Check if sheet is valid\n    if (!sheet) {\n      console.error(\"Error: Active worksheet not found.\");\n      return;\n    }\n    var headers = [\"Mobile Number\"];\n    headers.forEach(function (header, index) {\n      var cell = sheet.getCell(0, index);\n      cell.values = [[header]];\n      cell.format.fill.color = \"#ed204c\"; // Set header cell color to #ed204c\n      cell.format.font.color = \"#FFFFFF\"; // White text color\n      cell.format.font.bold = true; // Bold text\n      cell.format.horizontalAlignment = \"Center\"; // Center alignment\n    });\n\n    // Autofit the columns\n    sheet.getUsedRange().getEntireColumn().format.autofitColumns();\n\n    // Clear other columns\n    var usedRange = sheet.getUsedRange();\n    usedRange.load('rowCount, columnCount');\n    return context.sync().then(function () {\n      // Check if usedRange is valid\n      if (usedRange.rowCount > 0 && usedRange.columnCount > headers.length) {\n        var columnRange = sheet.getRangeByIndexes(0, headers.length, usedRange.rowCount, usedRange.columnCount - headers.length);\n        columnRange.clear();\n        return context.sync();\n      }\n    }).then(function () {\n      // Validate and fill mobile numbers\n      /*   validateAndFillMobileNumbers();*/\n    });\n  })[\"catch\"](function (error) {\n    console.error(\"Error in AddMobileNumberColumn: \" + error);\n  });\n}\nfunction getWorkbookBlob(_x19) {\n  return _getWorkbookBlob.apply(this, arguments);\n}\nfunction _getWorkbookBlob() {\n  _getWorkbookBlob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(data) {\n    var workbook, worksheet, uint8Array;\n    return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n      while (1) switch (_context12.prev = _context12.next) {\n        case 0:\n          workbook = new ExcelJS.Workbook();\n          worksheet = workbook.addWorksheet(\"Sheet1\");\n          worksheet.addRows(data);\n          _context12.next = 5;\n          return workbook.xlsx.writeBuffer();\n        case 5:\n          uint8Array = _context12.sent;\n          return _context12.abrupt(\"return\", new Blob([uint8Array], {\n            type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n          }));\n        case 7:\n        case \"end\":\n          return _context12.stop();\n      }\n    }, _callee12);\n  }));\n  return _getWorkbookBlob.apply(this, arguments);\n}\nwindow.onclick = function (event) {\n  if (!event.target.matches('.dropdown-button')) {\n    var dropdowns = document.getElementsByClassName(\"dropdown-content\");\n    for (var i = 0; i < dropdowns.length; i++) {\n      var openDropdown = dropdowns[i];\n      if (openDropdown.classList.contains('show')) {\n        openDropdown.classList.remove('show');\n      }\n    }\n  }\n};\nfunction showNotification(message, type) {\n  var notification = document.getElementById('notification');\n  notification.textContent = message;\n  notification.className = 'notification';\n  notification.classList.add(type === \"error\" ? 'error' : 'success');\n  notification.classList.add('show');\n  setTimeout(function () {\n    notification.classList.remove('show');\n  }, 3000);\n}\n\n//# sourceURL=webpack://montysmsweb/./JS/SMSCampaign.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./JS/SMSCampaign.js"]();
/******/ 	
/******/ })()
;